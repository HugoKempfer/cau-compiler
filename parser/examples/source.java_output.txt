<KEYWORD, class>
<ID, Demo>
<BLOCK, {>
<V_TYPE, int>
<ID, version>
<ASSIGN, =>
<LITERAL, "alpha">
<SC, ;>
<V_TYPE, boolean>
<ID, isWorking>
<PAREN, (>
<V_TYPE, String>
<ID, groupname>
<PAREN, )>
<BLOCK, {>
<V_TYPE, boolean>
<ID, works>
<ASSIGN, =>
<BOOL, false>
<SC, ;>
<CONDITIONAL, if>
<PAREN, (>
<BOOL, true>
<CMP_OP, ==>
<BOOL, true>
<PAREN, )>
<BLOCK, {>
<ID, works>
<ASSIGN, =>
<BOOL, true>
<SC, ;>
<BLOCK, }>
<KEYWORD, return>
<ID, works>
<SC, ;>
<BLOCK, }>
<V_TYPE, int>
<ID, score>
<PAREN, (>
<V_TYPE, int>
<ID, max>
<COMMA, ,>
<V_TYPE, int>
<ID, average>
<PAREN, )>
<BLOCK, {>
<V_TYPE, int>
<ID, score>
<SC, ;>
<ITERATIVE, while>
<PAREN, (>
<BOOL, false>
<PAREN, )>
<BLOCK, {>
<ID, score>
<ASSIGN, =>
<S_INT, 0>
<SC, ;>
<BLOCK, }>
<CONDITIONAL, if>
<PAREN, (>
<BOOL, false>
<PAREN, )>
<BLOCK, {>
<ID, score>
<ASSIGN, =>
<S_INT, 1>
<SC, ;>
<BLOCK, }>
<CONDITIONAL, else>
<BLOCK, {>
<ID, score>
<ASSIGN, =>
<ID, max>
<SC, ;>
<BLOCK, }>
<KEYWORD, return>
<ID, score>
<SC, ;>
<BLOCK, }>
<BLOCK, }>
